
Loading parameters
------------------

Loading lexicon
---------------
Signature:
C/0: list → list
TRUE/0: bool
FALSE/0: bool
NIL/0: list
CONS/0: nat → list → list
0/0: digit
1/0: digit
2/0: digit
3/0: digit
4/0: digit
5/0: digit
6/0: digit
7/0: digit
8/0: digit
9/0: digit
DIGIT/0: digit → nat
DECC/0: nat → digit → nat
./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
EMPTY/0: list → bool
EQUAL/0: ∀t0. t0 → t0 → bool
HEAD/0: list → nat
IF/0: ∀t0. bool → t0 → t0 → t0
TAIL/0: list → list
x_: t6
y_: t7
x_: t20
x_: t30
y_: t31
x_: t41
y_: t42
x_: t54
y_: t55
x_: t68
y_: t69
x_: t88
y_: t89

Background: 9
EMPTY [] = TRUE
EMPTY (CONS x_ y_) = FALSE
EQUAL x_ x_ = TRUE
EQUAL x_ y_ = FALSE
HEAD (CONS x_ y_) = x_
IF TRUE x_ y_ = x_
IF FALSE x_ y_ = y_
TAIL [] = []
TAIL (CONS x_ y_) = y_

Templates: 4
C (CONS [!] [!]) = [!]
C [] = [!]
C [!] = [!]
[!] = [!]

Deterministic: true

Context { substitution: {}, next: 217 }

Loading data
------------
Datum { i: IntList([5, 1, 8, 27, 5, 92, 54, 67, 8]), o: Int(8) }
Datum { i: IntList([24, 81, 35, 8, 9, 10, 98, 0, 15]), o: Int(15) }
Datum { i: IntList([6]), o: Int(6) }
Datum { i: IntList([1, 45, 5, 60, 2, 16, 4, 22, 64, 8]), o: Int(8) }
Datum { i: IntList([5, 79, 20, 7, 2, 73, 1, 3, 7]), o: Int(7) }
Datum { i: IntList([4, 6, 0]), o: Int(0) }
Datum { i: IntList([45, 9, 6, 5, 3]), o: Int(3) }
Datum { i: IntList([85, 95, 6, 31, 23, 33]), o: Int(33) }
Datum { i: IntList([0, 5, 0, 0, 4, 18, 57, 10, 39]), o: Int(39) }
Datum { i: IntList([7, 6, 8, 9, 53, 3]), o: Int(3) }
Datum { i: IntList([5]), o: Int(5) }
Datum { i: IntList([5, 44]), o: Int(44) }
Datum { i: IntList([2]), o: Int(2) }
Datum { i: IntList([9, 26, 2, 82, 95, 10, 82, 57]), o: Int(57) }
Datum { i: IntList([67, 97, 31]), o: Int(31) }
Datum { i: IntList([0]), o: Int(0) }
Datum { i: IntList([55, 36, 4]), o: Int(4) }
Datum { i: IntList([29, 10, 48, 4, 98, 3, 33, 63]), o: Int(63) }
Datum { i: IntList([49, 0, 5]), o: Int(5) }
Datum { i: IntList([14, 9, 8, 4, 4]), o: Int(4) }
Datum { i: IntList([55]), o: Int(55) }
Datum { i: IntList([5, 75, 6, 1, 48, 3, 38, 51]), o: Int(51) }
Datum { i: IntList([5, 7]), o: Int(7) }
Datum { i: IntList([9, 7]), o: Int(7) }
Datum { i: IntList([7]), o: Int(7) }
Datum { i: IntList([1, 89, 65, 48, 9, 7]), o: Int(7) }
Datum { i: IntList([75, 41, 32, 40, 17, 3, 9, 2]), o: Int(2) }
Datum { i: IntList([18, 1, 2, 9, 52]), o: Int(52) }
Datum { i: IntList([11, 9, 26]), o: Int(26) }
Datum { i: IntList([35, 0, 50, 3, 42, 24, 79]), o: Int(79) }
Datum { i: IntList([89]), o: Int(89) }
Datum { i: IntList([25, 2, 92, 72, 80, 10, 80, 3, 1]), o: Int(1) }
Datum { i: IntList([3, 5, 4, 14, 0, 78]), o: Int(78) }
Datum { i: IntList([10, 67, 9, 9, 9]), o: Int(9) }
Datum { i: IntList([5, 10, 8, 51, 10, 2, 26, 57, 6]), o: Int(6) }
Datum { i: IntList([10, 92, 35, 91, 8, 3]), o: Int(3) }
Datum { i: IntList([3, 12, 5, 0, 6, 88, 5, 8, 74, 10]), o: Int(10) }
Datum { i: IntList([64, 98, 10, 5]), o: Int(5) }
Datum { i: IntList([4]), o: Int(4) }
Datum { i: IntList([16, 69, 25, 18, 1, 45, 18, 43, 6, 5]), o: Int(5) }
Datum { i: IntList([5, 8, 0, 76, 9, 40, 69]), o: Int(69) }
Datum { i: IntList([10, 1, 8, 2, 0, 1, 73, 5, 5, 41]), o: Int(41) }
Datum { i: IntList([8, 2, 1, 9, 41, 23, 5]), o: Int(5) }
Datum { i: IntList([9, 49, 77, 4, 29]), o: Int(29) }
Datum { i: IntList([23, 71, 73, 7, 96, 68, 2, 8, 0]), o: Int(0) }
Datum { i: IntList([5, 1, 50, 5, 47, 62, 5, 3, 10]), o: Int(10) }
Datum { i: IntList([2, 2, 81, 1, 38, 10, 1, 10]), o: Int(10) }
Datum { i: IntList([8, 7, 45, 4, 48, 3, 64, 6, 78, 45]), o: Int(45) }
Datum { i: IntList([2, 81, 75, 10, 6, 0, 3, 21]), o: Int(21) }
Datum { i: IntList([1, 85, 4, 22, 35, 62, 2, 1, 15]), o: Int(15) }

Loading H*
----------


Initial Population
------------------
0: 4.5643 "C = TAIL;"
1: 14.1293 "C = .(CONS .(DIGIT 1));"
2: 14.1293 "C = .(CONS .(DIGIT 0));"
3: 15.0231 "C = .(.(IF FALSE) NIL);"
4: 15.0231 "C = .(.(IF TRUE) NIL);"
5: 18.6066 "C = .(.(IF .(EMPTY NIL)) NIL);"
6: 19.5004 "C = .(.(.(IF TRUE) TAIL) TAIL);"
7: 22.1901 "C = .(CONS .(.(DECC .(DIGIT 0)) 7));"
8: 22.1901 "C = .(.(IF .(EMPTY NIL)) .(TAIL NIL));"
9: 23.0840 "C = .(.(IF .(.(EQUAL EQUAL) EQUAL)) NIL);"

Initial Prediction
------------------

Evolving
--------
n_data,generation,rank,nlposterior,h_star_nlposterior,trs
